/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemacontable.registrodepartidas;

import com.toedter.calendar.JTextFieldDateEditor;
import dbconnectionQueries.Create;
import dbconnectionQueries.Select;
import sistemacontable.libromayor.TipoCuenta;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

/**
 * @author PC
 */
public class RegistroDePartidas extends javax.swing.JPanel {
    

    // JPopupMenu para mostrar el texto completo

    private DefaultTableModel model = null;

    public boolean isNumber (String str) {
        return str.matches("-?\\d+(\\.\\d+)?");
    }
    private boolean searchButtonWasPressed = false;

    private void showTextComboBox (int maxLength) {
        new Thread(new Runnable() {
            @Override
            public void run () {
                try {
                    String selectedItem = (String) jComboSelectAccountTitle.getSelectedItem();
                    assert selectedItem != null;
                    if (selectedItem.length() > maxLength) {
                        jPopupMenu1.removeAll();
                        jPopupMenu1.add(new JLabel(selectedItem));
                        jPopupMenu1.show(jComboSelectAccountTitle, 0, jComboSelectAccountTitle.getHeight());
                    }
                } catch (Exception ignored) {
                }

                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        }).start();
    }


    private void resetData () {

        model = new DefaultTableModel(null, new String[]{
                "Fecha", "Cuenta", "CÃ³digo", "Debe", "Haber"
        });

        jDateChooser.setDate(new Date());
        jcomboSelectAccountType.setSelectedIndex(0);
        jComboSelectAccountTitle.removeAllItems();
        jComboSelectAccountTitle.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnRegistry.setEnabled(false);

        jTableDaily.setModel(model);

        jTableDaily.setRowHeight(30);
        jTableDaily.setModel(model);
    }

    /**
     * Creates new form IngresoPar
     */
    public RegistroDePartidas () {
        initComponents();
        resetData();

        java.util.Date date = new java.util.Date();
        jDateChooser.setDate(date);
        jDateChooser.setMaxSelectableDate(date);
        JTextFieldDateEditor editor = (JTextFieldDateEditor) jDateChooser.getDateEditor();
        editor.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDaily = new javax.swing.JTable();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnRegistry = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jcomboSelectAccountType = new javax.swing.JComboBox<>();
        jComboSelectAccountTitle = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldLookForItem = new javax.swing.JTextField();
        btnLookUpFor = new javax.swing.JButton();
        btnAddNewRegistry = new javax.swing.JButton();
        btnCancellLookingFor = new javax.swing.JButton();
        btnGetTypes = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(213, 219, 231));
        jPanel3.setName("panelContenido"); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 0, 970, -1));

        jTableDaily.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Titulo", "Codigo", "Debe", "Haber"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableDaily);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 680, 420));

        btnCancelar.setBackground(new java.awt.Color(71, 102, 121));
        btnCancelar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 450, 150, 40));

        btnGuardar.setBackground(new java.awt.Color(71, 102, 121));
        btnGuardar.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ahorrar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 510, 150, 40));

        btnRegistry.setBackground(new java.awt.Color(71, 102, 121));
        btnRegistry.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnRegistry.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ahorrar.png"))); // NOI18N
        btnRegistry.setText("Registrar");
        btnRegistry.setEnabled(false);
        btnRegistry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistryActionPerformed(evt);
            }
        });
        jPanel3.add(btnRegistry, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 390, 150, 40));

        jSeparator1.setForeground(new java.awt.Color(0, 102, 102));
        jPanel3.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 48, 990, 10));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("REGISTRO DE PARTIDAS");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 300, -1));

        jDateChooser.setBackground(new java.awt.Color(71, 102, 121));
        jDateChooser.setForeground(new java.awt.Color(255, 255, 255));
        jDateChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDateChooserMouseClicked(evt);
            }
        });
        jDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserPropertyChange(evt);
            }
        });
        jPanel3.add(jDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 130, 40));

        jcomboSelectAccountType.setBackground(new java.awt.Color(71, 102, 121));
        jcomboSelectAccountType.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jcomboSelectAccountType.setForeground(new java.awt.Color(255, 255, 255));
        jcomboSelectAccountType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar tipo de cuenta", "Activo", "Pasivo", "Patrimonio", "Cierre" }));
        jcomboSelectAccountType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboSelectAccountTypeActionPerformed(evt);
            }
        });
        jPanel3.add(jcomboSelectAccountType, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 190, 40));

        jComboSelectAccountTitle.setBackground(new java.awt.Color(71, 102, 121));
        jComboSelectAccountTitle.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jComboSelectAccountTitle.setForeground(new java.awt.Color(255, 255, 255));
        jComboSelectAccountTitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar cuenta" }));
        jComboSelectAccountTitle.setEnabled(false);
        jComboSelectAccountTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboSelectAccountTitleActionPerformed(evt);
            }
        });
        jPanel3.add(jComboSelectAccountTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 270, 40));

        jPanel2.setBackground(new java.awt.Color(213, 219, 231));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldLookForItem.setBackground(new java.awt.Color(213, 219, 231));
        jTextFieldLookForItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar cuenta o codigo"));
        jTextFieldLookForItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldLookForItemKeyPressed(evt);
            }
        });
        jPanel2.add(jTextFieldLookForItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 60));

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 60, 156, -1));

        btnLookUpFor.setBackground(new java.awt.Color(71, 102, 121));
        btnLookUpFor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnLookUpFor.setForeground(new java.awt.Color(255, 255, 255));
        btnLookUpFor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnLookUpFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLookUpForActionPerformed(evt);
            }
        });
        jPanel3.add(btnLookUpFor, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 130, 70, 40));

        btnAddNewRegistry.setBackground(new java.awt.Color(71, 102, 121));
        btnAddNewRegistry.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnAddNewRegistry.setForeground(new java.awt.Color(255, 255, 255));
        btnAddNewRegistry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/new-file.png"))); // NOI18N
        btnAddNewRegistry.setText("Nuevo asiento");
        btnAddNewRegistry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewRegistryActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddNewRegistry, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 270, -1, 40));

        btnCancellLookingFor.setBackground(new java.awt.Color(71, 102, 121));
        btnCancellLookingFor.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnCancellLookingFor.setForeground(new java.awt.Color(255, 255, 255));
        btnCancellLookingFor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancellLookingFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancellLookingForActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancellLookingFor, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 130, 70, 40));

        btnGetTypes.setBackground(new java.awt.Color(71, 102, 121));
        btnGetTypes.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnGetTypes.setForeground(new java.awt.Color(255, 255, 255));
        btnGetTypes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btnGetTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetTypesActionPerformed(evt);
            }
        });
        jPanel3.add(btnGetTypes, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, 70, 40));

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 865, 567));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        boolean option = JOptionPane.showConfirmDialog(null, "Â¿EstÃ¡s seguro que deseas cancelar la operaciÃ³n?", "",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION;
        if (option){
            resetData();
        }

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRegistryActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistryActionPerformed
        Select s = new Select();
        DefaultTableModel myModel = (DefaultTableModel) jTableDaily.getModel();

        // Crea un formato de fecha personalizado
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE, dd, MMMM, yyyy");

        if (jDateChooser.getDate() == null) {
            showError("Seleccione una fecha");
            return;
        }

        // Formatea la fecha como una cadena en el formato deseado
        String formattedDate = dateFormat.format(jDateChooser.getDate());
        Object selectedObject = jcomboSelectAccountType.getSelectedItem();
        String selected = selectedObject.toString();
        String account = (String) jComboSelectAccountTitle.getSelectedItem();
        String code = "";
        ResultSet rs = s.getAccountCode(selected.toLowerCase(), account.toUpperCase().trim());

        String cantidadIngresada = jTextFieldLookForItem.getText();

        if (dateFormat.format(jDateChooser.getDate()).isEmpty()) {
            showError("Seleccione una fecha");
            return;
        }

        if (!Objects.equals(formattedDate, "") && !Objects.equals(cantidadIngresada, "")){
            try {
                while (rs.next()){
                    code = rs.getString(1);

                    Object [] nuevaFila = new Object[]{
                            formattedDate,
                            account.trim(),
                            code,
                    };

                    myModel.addRow(nuevaFila);
                    jTableDaily.setRowHeight(30);

                    jDateChooser.setDate(null);
                    jcomboSelectAccountType.setSelectedIndex(0);
                    jComboSelectAccountTitle.setEnabled(false);
                    btnRegistry.setEnabled(false);
                    btnGuardar.setEnabled(true);
                }
            }catch (SQLException sqlException){
                System.out.println(sqlException.getMessage());
            }
        }else {
            showError("Faltan campos por llenar");
        }


    }//GEN-LAST:event_btnRegistryActionPerformed

    private void jComboSelectAccountTitleActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboSelectAccountTitleActionPerformed
        if (jComboSelectAccountTitle.getSelectedIndex() == 0) {
            btnRegistry.setEnabled(false);
            btnGuardar.setEnabled(false);
            return;
        }

        if(searchButtonWasPressed){
            String itemLookedFor = (String) jComboSelectAccountTitle.getSelectedItem();
            Select s = new Select();

            if (itemLookedFor == null) {
                return;
            }

            if(itemLookedFor.isEmpty()) {
                jComboSelectAccountTitle.setEnabled(false);
                showError("Error: debe proveer un nombre de cuenta o cÃ³digo");
                return;
            }

            ResultSet queryResult = s.findAccountType(itemLookedFor.toUpperCase());

            try {
                List<String> codes = new ArrayList<String>();

                while (queryResult.next()) {
                    String originalText = queryResult.getString(2);
                    String code = queryResult.getString(1);
                    codes.add(code);
                    String capitalizedText = capitalizeFirst(originalText);
                    jComboSelectAccountTitle.addItem(capitalizedText);
                }

                updateAccountTypeSelection(codes);

            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        btnRegistry.setEnabled(true);
        btnGuardar.setEnabled(true);
        showTextComboBox(50);
    }

    private static List<String []> obtenerRegistros(JTable table){
        List<String []> lista = new ArrayList<>();

        for (int i = 0; i < table.getRowCount(); i++) {
            String [] data = new String[table.getColumnCount()];
            for (int j = 0; j < table.getColumnCount(); j++) {
                data[j] = (String) table.getValueAt(i, j);
            }
            lista.add(data);
        }
        return lista;
    }

    private double totalPorCuentas(TipoCuenta tipoCuenta, List<String[]> lista) {
        double total = 0.0;
    
        switch (tipoCuenta) {
            case DEBER:
                total = lista.stream().mapToDouble(item -> Integer.parseInt(item[3])).sum();
                break;
            case HABER:
                total = lista.stream().mapToDouble(item -> Integer.parseInt(item[4])).sum();
                break;
        }

        return total;
    }


    private double[] totalPorCuentas(List<String []> lista){
        double sum1 = 0, sum2 = 0;

        for (String[] value : lista) {
            sum1 += Double.parseDouble(value[3]);
            sum2 += Double.parseDouble(value[4]);
        }

        return new double[]{sum1, sum2};
    }

    private void btnGuardarActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (jTableDaily.getRowCount() == 0){
            return;
        }

        List<String[]> lista = obtenerRegistros(jTableDaily);
        double[] sumas = totalPorCuentas(lista);

        if (sumas[0] != sumas[1]){
            JOptionPane.showMessageDialog(null, "La sumatoria de las cuentas debe ser igual", "AtenciÃ³n", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (String[] strings : lista) {
            new Create().saveDaily(strings);
        }

        resetData();

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAddNewRegistryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewRegistryActionPerformed
        btnAddNewRegistry.setFocusPainted(false);

        DefaultTableModel myModel = (DefaultTableModel) jTableDaily.getModel();
        Object[] newEmptyRow = new Object[]{
                "", "", "", "", ""
        };

        myModel.addRow(newEmptyRow);

    }//GEN-LAST:event_btnAddNewRegistryActionPerformed

    private void btnCancellLookingForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancellLookingForActionPerformed
        btnCancellLookingFor.setFocusPainted(false);
        jTextFieldLookForItem.setText("");
    }//GEN-LAST:event_btnCancellLookingForActionPerformed

    private void btnGetTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetTypesActionPerformed
        btnGetTypes.setFocusPainted(false);
        if (jcomboSelectAccountType.getSelectedIndex() != 0) {
//            jComboSelectAccountTitle.setRenderer(new CustomComboBoxRenderer());
            Object selectedObject = jcomboSelectAccountType.getSelectedItem();
            String selected = selectedObject.toString();
            Select s = new Select();
            ResultSet queryResult = s.getAccounts(selected);

            // Habilita el JComboBox
            jComboSelectAccountTitle.setEnabled(true);
            // Borra los elementos existentes en el JComboBox
            jComboSelectAccountTitle.removeAllItems();

            try {
                while (queryResult.next()) {
                    // Agrega los elementos al JComboBox utilizando getString(2) para obtener el valor de la primera columna
                    String originalText = queryResult.getString(2);
                    if (queryResult.getString(1).length() == 2) {
                        originalText = "   " + originalText; // Agrega dos espacios iniciales
                        String capitalizedText = originalText.substring(0, 4).toUpperCase() + originalText.substring(4).toLowerCase();
                        jComboSelectAccountTitle.addItem(capitalizedText);
                    } else if (queryResult.getString(1).length() >= 4) {
                        originalText = "     " + originalText; // Agrega cuatro espacios iniciales
                        String capitalizedText = originalText.substring(0, 6).toUpperCase() + originalText.substring(6).toLowerCase();
                        jComboSelectAccountTitle.addItem(capitalizedText);
                    } else {
                        String capitalizedText = originalText.substring(0, 1).toUpperCase() + originalText.substring(1).toLowerCase();
                        jComboSelectAccountTitle.addItem(capitalizedText);
                    }
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        } else {
            // Deshabilita el JComboBox y borra los elementos
            jComboSelectAccountTitle.setEnabled(false);
            btnRegistry.setEnabled(false);
            btnGuardar.setEnabled(false);
            showError("Seleccione un tipo de cuenta");
        }
    }//GEN-LAST:event_btnGetTypesActionPerformed

    private void jcomboSelectAccountTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboSelectAccountTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcomboSelectAccountTypeActionPerformed

    private void btnLookUpForActionPerformed(java.awt.event.ActionEvent evt) {
        lookOutForAccount();
    }

    private void jTextFieldLookForItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLookForItemKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER){
            lookOutForAccount();
        }
    }//GEN-LAST:event_jTextFieldLookForItemKeyPressed

    private void jDateChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDateChooserMouseClicked
        System.out.println("Hola Mundo");
    }//GEN-LAST:event_jDateChooserMouseClicked

    private void jDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserPropertyChange
//        System.out.println("Hola");
    }//GEN-LAST:event_jDateChooserPropertyChange

    private void lookOutForAccount(){
        btnLookUpFor.setFocusPainted(false);
        jComboSelectAccountTitle.removeAllItems();

        String itemLookedFor = jTextFieldLookForItem.getText().trim();

        if (itemLookedFor == null) {
            return;
        }

        if(itemLookedFor.isEmpty()) {
            jComboSelectAccountTitle.setEnabled(false);
            showError("Error: debe proveer un nombre de cuenta o cÃ³digo");
            return;
        }

        Select s = new Select();
        ResultSet queryResult = s.getAccount(itemLookedFor.toUpperCase());

        try {
            boolean cuentaEncontrada = false; // Variable para controlar si se encontrÃ³ una cuenta
            List<String> codes = new ArrayList<String>();

            while (queryResult.next()) {
                jComboSelectAccountTitle.setEnabled(true);
                String originalText = queryResult.getString(2);
                String code = queryResult.getString(1);
                codes.add(code);
                String capitalizedText = capitalizeFirst(originalText);
                jComboSelectAccountTitle.addItem(capitalizedText);
                cuentaEncontrada = true; // Se encontrÃ³ al menos una cuenta
            }

            updateAccountTypeSelection(codes);


            if (!cuentaEncontrada) {
                jComboSelectAccountTitle.setEnabled(false);
                btnRegistry.setEnabled(false);
                btnGuardar.setEnabled(false);
                showError("No se encontrÃ³ la cuenta");
            }

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        jTextFieldLookForItem.setText("");
        searchButtonWasPressed = true;
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private String capitalizeFirst(String text) {
        return text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase();
    }

    private void updateAccountTypeSelection(List<String> account) {
        String initialCode = account.get(0).substring(0, 1);
        switch (initialCode) {
            case "1", "4" -> jcomboSelectAccountType.setSelectedIndex(1); //Activo
            case "2", "5" -> jcomboSelectAccountType.setSelectedIndex(2); //Pasivo
            case "3" -> jcomboSelectAccountType.setSelectedIndex(3); //Patrimonio
            case "6" -> jcomboSelectAccountType.setSelectedIndex(4); //Cierre
            default -> jcomboSelectAccountType.setSelectedIndex(0); // Valor por defecto
        };
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewRegistry;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancellLookingFor;
    private javax.swing.JButton btnGetTypes;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLookUpFor;
    private javax.swing.JButton btnRegistry;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboSelectAccountTitle;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDaily;
    private javax.swing.JTextField jTextFieldLookForItem;
    private javax.swing.JComboBox<String> jcomboSelectAccountType;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package sistemacontable;

import dbconnectionQueries.Select;

import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

/**
 *
 * @author EstudianteFMO
 */
public class LIbroMayor extends javax.swing.JPanel {

    /**
     * Creates new form LIbroMAyor
     */
    public LIbroMayor() {
        initComponents();
        loadAccounts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableGeneral = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(213, 219, 231));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("LIBRO MAYOR");

        jSeparator1.setForeground(new java.awt.Color(0, 102, 102));

        jTableGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Cuenta", "Debe", "Haber"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableGeneral);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Libro Mayor", jPanel3);

        jTableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cuenta", "Resultado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableResults);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Resultados", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadAccounts(){
        try{
            Select s = new Select();
            ResultSet rs = s.loadAccountsToGeneralBook();
            DefaultTableModel myModel = (DefaultTableModel) jTableGeneral.getModel();

            while(rs.next()){
                String fecha = rs.getString(1);
                String cuenta = rs.getString(2);
                String debe = rs.getString(4);
                String haber = rs.getString(5);

                Object[] newRow = {
                        fecha,
                        cuenta,
                        debe,
                        haber
                };

                myModel.addRow(newRow);
                jTableGeneral.setRowHeight(30);
            }

            if(jTableGeneral.getColumnCount() > 0){
                cleanUpSameAccountTitle(myModel);
            }
        }catch (Exception e){
            throw new RuntimeException(e);
        }
    }

    private void cleanUpSameAccountTitle(DefaultTableModel myModel) {
        final int columnAccount = 1;
        final int columnDebit = 2;
        final int columnCredit = 3;

        String valorAnteriorAccount = "";

        for (int fila = 0; fila < myModel.getRowCount(); fila++) {
            Object valorAccount = myModel.getValueAt(fila, columnAccount);
            Object valorDebit = myModel.getValueAt(fila, columnDebit);
            Object valorCredit = myModel.getValueAt(fila, columnCredit);

            if (valorAccount.equals(valorAnteriorAccount)) {
                myModel.setValueAt("", fila, columnAccount);
            } else {
                valorAnteriorAccount = valorAccount.toString();
            }

            if (valorDebit.equals("0")) {
                myModel.setValueAt("", fila, columnDebit);
            }

            if (valorCredit.equals("0")) {
                myModel.setValueAt("", fila, columnCredit);
            }
        }

        getSum();
    }

    //Agregar suma de columnas hasta que la cuenta cambie:
    private void getSum() {
        Select s = new Select();
        DefaultTableModel myModel = (DefaultTableModel) jTableGeneral.getModel();
        DefaultTableModel myResultsModel = (DefaultTableModel) jTableResults.getModel();

        double sumDebit = 0;
        double sumCredit = 0;

        final int columnAccount = 1;
        final int columnDebit = 2;

        System.out.println("N filas: " + myModel.getRowCount());

        for (int n = 0; n < myModel.getRowCount(); n++) {
            String currentValue = (String) myModel.getValueAt(n, columnAccount);
            ResultSet rsDebit = s.getSumFromDebit(currentValue);
            ResultSet rsCredit = s.getSumFromCredit(currentValue);

            if (n < myModel.getRowCount() - 1) {
                System.out.println(currentValue);
                try{
                    while(rsDebit.next()){
                        sumDebit = rsDebit.getDouble(1);
                    }

                    while(rsCredit.next()){
                        sumCredit = rsCredit.getDouble(1);
                    }
                }catch (Exception e){
                    throw new RuntimeException(e);
                }

                double balance = sumDebit - sumCredit;

                if (n < myResultsModel.getRowCount()) {
                    myResultsModel.setValueAt(currentValue, n, columnAccount);
                    myResultsModel.setValueAt(balance, n, columnDebit);
                } else {
                    myResultsModel.addRow(new Object[]{currentValue, balance});
                }
            }
        }

        cleanUpResultsTable();
    }

    private void cleanUpResultsTable(){
        DefaultTableModel myResultsModel = (DefaultTableModel) jTableResults.getModel();

        for(int n = 0; n < myResultsModel.getRowCount(); n++){
            if(myResultsModel.getValueAt(n,0) == ""){
                myResultsModel.removeRow(n);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableGeneral;
    private javax.swing.JTable jTableResults;
    // End of variables declaration//GEN-END:variables
}
